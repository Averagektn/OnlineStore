// <auto-generated />
using System;
using CodeFirst.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CodeFirst.Migrations
{
    [DbContext(typeof(ClothesStoreContext))]
    partial class ClothesStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "order_status", new[] { "accepted", "assembled", "shipped", "delivered" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_type", new[] { "customer", "admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategorySection", b =>
                {
                    b.Property<int>("CategoryCatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_cat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CategoryCatId"));

                    b.Property<int>("SectionSecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("section_sec_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SectionSecId"));

                    b.HasKey("CategoryCatId", "SectionSecId")
                        .HasName("pk_category_section");

                    b.HasIndex("SectionSecId");

                    b.ToTable("category_section", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Address", b =>
                {
                    b.Property<int>("AdrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AdrId"));

                    b.Property<string>("AdrAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("adr_address");

                    b.Property<int>("AdrPostcode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adr_postcode");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("AdrPostcode"));

                    b.Property<int>("AdrUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("adr_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("AdrUser"));

                    b.HasKey("AdrId")
                        .HasName("pk_address");

                    b.HasIndex("AdrUser");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Brand", b =>
                {
                    b.Property<int>("BraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bra_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BraId"));

                    b.Property<string>("BraName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("bra_name");

                    b.HasKey("BraId")
                        .HasName("pk_brand");

                    b.HasIndex(new[] { "BraName" }, "uq_brand_name")
                        .IsUnique();

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Cart", b =>
                {
                    b.Property<int>("CrtUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crt_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CrtUser"));

                    b.Property<int>("CrtProductVariant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("crt_product_variant");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CrtProductVariant"));

                    b.Property<short>("CrtQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("crt_quantity");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<short>("CrtQuantity"));

                    b.HasKey("CrtUser", "CrtProductVariant")
                        .HasName("pk_user_product");

                    b.HasIndex("CrtProductVariant");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CatId"));

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cat_name");

                    b.Property<int>("CatParent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cat_parent");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("CatParent"));

                    b.HasKey("CatId")
                        .HasName("pk_category");

                    b.HasIndex("CatParent");

                    b.HasIndex(new[] { "CatName" }, "qu_category_name")
                        .IsUnique();

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Color", b =>
                {
                    b.Property<int>("ColId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("col_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ColId"));

                    b.Property<string>("ColName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("col_name");

                    b.HasKey("ColId")
                        .HasName("pk_color");

                    b.HasIndex(new[] { "ColName" }, "uq_color_name")
                        .IsUnique();

                    b.ToTable("color", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Medium", b =>
                {
                    b.Property<int>("MedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("med_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedId"));

                    b.Property<byte[]>("MedBytes")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("med_bytes");

                    b.Property<string>("MedFilename")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("med_filename");

                    b.Property<string>("MedFiletype")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("med_filetype");

                    b.Property<int>("MedProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("med_product");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("MedProduct"));

                    b.HasKey("MedId")
                        .HasName("pk_media");

                    b.HasIndex("MedProduct");

                    b.HasIndex(new[] { "MedFilename" }, "uq_filename_filetype")
                        .IsUnique();

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Order", b =>
                {
                    b.Property<int>("OrdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ord_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrdId"));

                    b.Property<int>("OrdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ord_address");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrdAddress"));

                    b.Property<DateOnly>("OrdDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("ord_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("OrdPrice")
                        .HasColumnType("money")
                        .HasColumnName("ord_price");

                    b.Property<int>("OrdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ord_user");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrdUser"));

                    b.HasKey("OrdId")
                        .HasName("pk_order");

                    b.HasIndex("OrdAddress");

                    b.HasIndex("OrdUser");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.OrderProductVariant", b =>
                {
                    b.Property<int>("OpvOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("opv_order");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OpvOrder"));

                    b.Property<int>("OpvProductVariant")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("opv_product_variant");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OpvProductVariant"));

                    b.Property<short>("OpvQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("opv_quantity");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<short>("OpvQuantity"));

                    b.HasKey("OpvOrder", "OpvProductVariant")
                        .HasName("pk_order_product_variant");

                    b.HasIndex("OpvProductVariant");

                    b.ToTable("order_product_variant", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.OrderTransaction", b =>
                {
                    b.Property<int>("OrtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ort_id");

                    b.Property<DateOnly>("OrtUpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("ort_updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasIndex("OrtId");

                    b.ToTable("order_transactions", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Product", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pro_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProId"));

                    b.Property<int>("ProAverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pro_average_rating");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ProAverageRating"));

                    b.Property<int>("ProBrand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pro_brand");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ProBrand"));

                    b.Property<int>("ProCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pro_category");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ProCategory"));

                    b.Property<string>("ProName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("pro_name");

                    b.Property<decimal>("ProPrice")
                        .HasColumnType("money")
                        .HasColumnName("pro_price");

                    b.HasKey("ProId")
                        .HasName("pk_product");

                    b.HasIndex("ProCategory");

                    b.HasIndex(new[] { "ProBrand", "ProCategory" }, "id_brand_category");

                    b.HasIndex(new[] { "ProName" }, "uq_product_name")
                        .IsUnique();

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.ProductVariant", b =>
                {
                    b.Property<int>("PrvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PrvId"));

                    b.Property<int>("PrvColor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_color");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PrvColor"));

                    b.Property<int>("PrvProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_product");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PrvProduct"));

                    b.Property<int>("PrvQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_quantity");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PrvQuantity"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("PrvQuantity"), null, null, 0L, null, null, null);

                    b.Property<int>("PrvSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("prv_size");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PrvSize"));

                    b.Property<string>("PrvSku")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("prv_sku");

                    b.HasKey("PrvId")
                        .HasName("pk_product_variant");

                    b.HasIndex("PrvColor");

                    b.HasIndex("PrvProduct");

                    b.HasIndex("PrvSize");

                    b.HasIndex(new[] { "PrvSku" }, "uq_sku")
                        .IsUnique();

                    b.ToTable("product_variant", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Review", b =>
                {
                    b.Property<int>("RevId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rev_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RevId"));

                    b.Property<int>("RevAuthor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rev_author");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RevAuthor"));

                    b.Property<string>("RevComment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rev_comment");

                    b.Property<DateOnly>("RevDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("rev_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("RevProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rev_product");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("RevProduct"));

                    b.Property<short>("RevRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("rev_rating");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<short>("RevRating"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<short>("RevRating"), null, null, null, 10L, null, null);

                    b.Property<string>("RevTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rev_title");

                    b.HasKey("RevId")
                        .HasName("pk_review");

                    b.HasIndex("RevAuthor");

                    b.HasIndex(new[] { "RevProduct", "RevRating" }, "id_product_rating");

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Section", b =>
                {
                    b.Property<int>("SecId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("sec_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SecId"));

                    b.Property<string>("SecName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("sec_name");

                    b.HasKey("SecId")
                        .HasName("pk_section");

                    b.HasIndex(new[] { "SecName" }, "uq_section_name")
                        .IsUnique();

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.Size", b =>
                {
                    b.Property<int>("SizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("siz_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SizId"));

                    b.Property<string>("SizName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("siz_name");

                    b.HasKey("SizId")
                        .HasName("pk_size");

                    b.HasIndex(new[] { "SizName" }, "uq_size_name")
                        .IsUnique();

                    b.ToTable("size", (string)null);
                });

            modelBuilder.Entity("CodeFirst.Model.User", b =>
                {
                    b.Property<int>("UsrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UsrId"));

                    b.Property<string>("UsrEmail")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("usr_email");

                    b.Property<string>("UsrFirstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usr_firstname");

                    b.Property<string>("UsrLastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("usr_lastname");

                    b.Property<string>("UsrPassword")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("usr_password");

                    b.Property<string>("UsrPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("usr_phone");

                    b.HasKey("UsrId")
                        .HasName("pk_user");

                    b.HasIndex(new[] { "UsrEmail" }, "uq_email")
                        .IsUnique();

                    b.HasIndex(new[] { "UsrPhone" }, "uq_phone")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("CategorySection", b =>
                {
                    b.HasOne("CodeFirst.Model.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryCatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_category");

                    b.HasOne("CodeFirst.Model.Section", null)
                        .WithMany()
                        .HasForeignKey("SectionSecId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_section");
                });

            modelBuilder.Entity("CodeFirst.Model.Address", b =>
                {
                    b.HasOne("CodeFirst.Model.User", "AdrUserNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("AdrUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("AdrUserNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.Cart", b =>
                {
                    b.HasOne("CodeFirst.Model.ProductVariant", "CrtProductVariantNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("CrtProductVariant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_variant");

                    b.HasOne("CodeFirst.Model.User", "CrtUserNavigation")
                        .WithMany("Carts")
                        .HasForeignKey("CrtUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("CrtProductVariantNavigation");

                    b.Navigation("CrtUserNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.Category", b =>
                {
                    b.HasOne("CodeFirst.Model.Category", "CatParentNavigation")
                        .WithMany("InverseCatParentNavigation")
                        .HasForeignKey("CatParent")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_categoty");

                    b.Navigation("CatParentNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.Medium", b =>
                {
                    b.HasOne("CodeFirst.Model.Product", "MedProductNavigation")
                        .WithMany("Media")
                        .HasForeignKey("MedProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product");

                    b.Navigation("MedProductNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.Order", b =>
                {
                    b.HasOne("CodeFirst.Model.Address", "OrdAddressNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OrdAddress")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_address");

                    b.HasOne("CodeFirst.Model.User", "OrdUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("OrdUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("OrdAddressNavigation");

                    b.Navigation("OrdUserNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.OrderProductVariant", b =>
                {
                    b.HasOne("CodeFirst.Model.Order", "OpvOrderNavigation")
                        .WithMany("OrderProductVariants")
                        .HasForeignKey("OpvOrder")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order");

                    b.HasOne("CodeFirst.Model.ProductVariant", "OpvProductVariantNavigation")
                        .WithMany("OrderProductVariants")
                        .HasForeignKey("OpvProductVariant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_variant");

                    b.Navigation("OpvOrderNavigation");

                    b.Navigation("OpvProductVariantNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.OrderTransaction", b =>
                {
                    b.HasOne("CodeFirst.Model.Order", "Ort")
                        .WithMany()
                        .HasForeignKey("OrtId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order");

                    b.Navigation("Ort");
                });

            modelBuilder.Entity("CodeFirst.Model.Product", b =>
                {
                    b.HasOne("CodeFirst.Model.Brand", "ProBrandNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProBrand")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_brand");

                    b.HasOne("CodeFirst.Model.Category", "ProCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("ProCategory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_category");

                    b.Navigation("ProBrandNavigation");

                    b.Navigation("ProCategoryNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.ProductVariant", b =>
                {
                    b.HasOne("CodeFirst.Model.Color", "PrvColorNavigation")
                        .WithMany("ProductVariants")
                        .HasForeignKey("PrvColor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_color");

                    b.HasOne("CodeFirst.Model.Product", "PrvProductNavigation")
                        .WithMany("ProductVariants")
                        .HasForeignKey("PrvProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product");

                    b.HasOne("CodeFirst.Model.Size", "PrvSizeNavigation")
                        .WithMany("ProductVariants")
                        .HasForeignKey("PrvSize")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_size");

                    b.Navigation("PrvColorNavigation");

                    b.Navigation("PrvProductNavigation");

                    b.Navigation("PrvSizeNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.Review", b =>
                {
                    b.HasOne("CodeFirst.Model.User", "RevAuthorNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("RevAuthor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.HasOne("CodeFirst.Model.Product", "RevProductNavigation")
                        .WithMany("Reviews")
                        .HasForeignKey("RevProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product");

                    b.Navigation("RevAuthorNavigation");

                    b.Navigation("RevProductNavigation");
                });

            modelBuilder.Entity("CodeFirst.Model.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CodeFirst.Model.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CodeFirst.Model.Category", b =>
                {
                    b.Navigation("InverseCatParentNavigation");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CodeFirst.Model.Color", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("CodeFirst.Model.Order", b =>
                {
                    b.Navigation("OrderProductVariants");
                });

            modelBuilder.Entity("CodeFirst.Model.Product", b =>
                {
                    b.Navigation("Media");

                    b.Navigation("ProductVariants");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("CodeFirst.Model.ProductVariant", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderProductVariants");
                });

            modelBuilder.Entity("CodeFirst.Model.Size", b =>
                {
                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("CodeFirst.Model.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
